function win = tapwin(L,ls_activity,conf)
%TAPWIN generate a tapering window for a linear WFS array
%   Usage: win = tapwin(L,ls_activity,conf)
%          win = tapwin(L,conf)
%          win = tapwin(L)
%
%   Input parameters:
%       L           - length of the loudspeaker array (m)
%       ls_activity - vector containing the activity of the loudspeakers from 
%                     0..1
%       conf        - optional struct containing configuration variables (see
%                     SFS_config for default values)
%
%   Output parameters:
%       win     - tapering window (1xnLS)
%
%   TAPWIN(L,ls_activity,conf) generates a tapering window for a linear WFS
%   loudspeaker array with a length of L. The window is created from a suqared
%   Hann window.
%
%   see also: wfs_brs, secondary_source_selection, hann

% AUTHOR: Hagen Wierstorf, Sascha Spors


%% ===== Checking of input  parameters ==================================
nargmin = 1;
nargmax = 3;
error(nargchk(nargmin,nargmax,nargin));
isargpositivescalar(L);
if ~exist('ls_activity','var')
    % If no explicit loudspeaker activity is given mark all speakers as active
    ls_activity = ones(1,number_of_loudspeaker(L,conf));
else
    if isstruct(ls_activity)
        conf = ls_activity;
        ls_activity = ones(1,number_of_loudspeaker(L,conf));
    else
        isargvector(ls_activity);
    end
end
if ~exist('conf','var')
    conf = SFS_config;
else
    isargstruct(conf);
end


%% ===== Configuration ==================================================
usetapwin = conf.usetapwin;
tapwinlen = conf.tapwinlen;
LSdist = conf.LSdist;


%% ===== Calculation ====================================================
% Generate a squared Hann window and split it to the two edges of the array as
% shown below.
%    ------------------------------------------------------------
%   |                                                            |
% _|                                                              |_
%
% This procedure becomes more complicated if not all speakers are active and if
% we have a circular array or any other closed loudspeaker array. The code below
% can handle all cases, where the active loudspeaker have no gaps.
%
% Find active loudspeaker and create only a window for these loudspeakers
idx = (( ls_activity>0 ));
nLS = length(ls_activity(idx));
win = zeros(1,nLS);

if(usetapwin)
    % Length of window (given by the value of tapwinlen). The window will be
    % splitted to both sides of the loudspeaker array.
    lenwin = round(tapwinlen*nLS)+2;
    %
    % Check if we have a to short window to apply it in a useful way. This can
    % be the case for very short loudspeaker arrays (as used in Wierstorf2010). 
    if lenwin<4
        win = ones(1,nLS);
    else
        % Create a squared Hann window with length lenwin
        %    -
        %   | |
        % _|   |_
        hannwin = hann(lenwin).^2;
        % Create tapering window
        % NOTE: the first and the last entry generated by hann are 0. Therefore we
        % are using the squared Hann window from its second sample until its
        % second last one. Also we have to look if we have a even or odd window 
        % length!
        if iseven(lenwin)
            win = [hannwin(2:ceil(end/2))' ...
                   ones(1,nLS-lenwin+2) ...
                   hannwin(ceil(end/2)+1:end-1)'];
        else
            win = [hannwin(2:ceil(end/2))' ...
                   ones(1,nLS-lenwin+3) ...
                   hannwin(ceil(end/2)+1:end-1)'];
        end
    end
else
    % If you want to use no tapering window:
    win = ones(1,nLS);
end

% If we have non active loudspeaker we have to move the tapering window to the
% right position. Also we have to check for closed arrays.
if length(ls_activity)~=length(ls_activity(idx))
    % Look for the first inactive and for the first active loudspeaker
    idx1 = find(ls_activity==0,1,'first');
    idx2 = find(ls_activity==1,1,'first');
    if idx1~=1
        % If the first loudspeaker is active we apply the window from here on
        % until the first inactive. If there were additional active loudspeakers
        % at the end we know that we have a close array and the rest of the
        % window is applied at the end in a way that the tapering window will be
        % corect.
        win = [win(end-idx1+2:end), ...
               zeros(1,length(ls_activity)-length(ls_activity(idx))), ...
               win(1:end-idx1+1)];
    else
        % If we have an inactive loudspeaker at the beginning place the window
        % in the middle.
        win = [zeros(1,length(1:idx2-1)), ...
               win, ...
               zeros(1,length(ls_activity)-length(win)-length(1:idx2-1))];
    end
end
